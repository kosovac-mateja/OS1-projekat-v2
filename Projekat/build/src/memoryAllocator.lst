GAS LISTING /tmp/ccyGJl9w.s 			page 1


   1              		.file	"memoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator8mem_initEv
   9              	_ZN15MemoryAllocator8mem_initEv:
  10              	.LFB4:
  11              		.file 1 "src/memoryAllocator.cpp"
   1:src/memoryAllocator.cpp **** #include "../h/memoryAllocator.h"
   2:src/memoryAllocator.cpp **** 
   3:src/memoryAllocator.cpp **** MemoryAllocator::FreeSegment* MemoryAllocator::freeSegmentHead;
   4:src/memoryAllocator.cpp **** MemoryAllocator::UsedSegment* MemoryAllocator::usedSegmentHead ;
   5:src/memoryAllocator.cpp **** bool MemoryAllocator::initialized = false;
   6:src/memoryAllocator.cpp **** 
   7:src/memoryAllocator.cpp **** void *MemoryAllocator::mem_alloc(size_t size) {
   8:src/memoryAllocator.cpp ****     if(size <= 0) return nullptr;
   9:src/memoryAllocator.cpp **** 
  10:src/memoryAllocator.cpp ****     size = size * MEM_BLOCK_SIZE;
  11:src/memoryAllocator.cpp **** 
  12:src/memoryAllocator.cpp ****     //inicijalizuj ako vec nije
  13:src/memoryAllocator.cpp ****     if(!initialized) {
  14:src/memoryAllocator.cpp ****         mem_init();
  15:src/memoryAllocator.cpp ****         initialized = true;
  16:src/memoryAllocator.cpp ****     }
  17:src/memoryAllocator.cpp **** 
  18:src/memoryAllocator.cpp ****     //iteriranje do prvog slobodnog bloka koji odgovara (first fit)
  19:src/memoryAllocator.cpp ****     FreeSegment *curr = freeSegmentHead;
  20:src/memoryAllocator.cpp ****     for(; curr && curr->size < size; curr = curr->next);
  21:src/memoryAllocator.cpp ****     if(!curr) return nullptr;
  22:src/memoryAllocator.cpp **** 
  23:src/memoryAllocator.cpp ****     size_t remainingSize = curr->size - size;
  24:src/memoryAllocator.cpp ****     curr->size = size;
  25:src/memoryAllocator.cpp ****     if(remainingSize < 2 * MEM_BLOCK_SIZE) { //ako je preostali prostor manji od jednog bloka(drugi
  26:src/memoryAllocator.cpp ****         if(freeSegmentHead == curr) freeSegmentHead = curr->next;
  27:src/memoryAllocator.cpp **** 
  28:src/memoryAllocator.cpp ****         if(curr->next) curr->next->prev = curr->prev;
  29:src/memoryAllocator.cpp **** 
  30:src/memoryAllocator.cpp ****         if(curr->prev) curr->prev->next = curr->next;
  31:src/memoryAllocator.cpp ****     } else {
  32:src/memoryAllocator.cpp ****         //pravljenje novog segmenta
  33:src/memoryAllocator.cpp ****         size_t offset = MEM_BLOCK_SIZE + size;
  34:src/memoryAllocator.cpp ****         FreeSegment* newSegm = (FreeSegment*)((char*)curr + offset);
  35:src/memoryAllocator.cpp **** 
  36:src/memoryAllocator.cpp ****         //uvezivanje newSegm u listu slobodnih segmenata
  37:src/memoryAllocator.cpp ****         if (curr->prev) {
  38:src/memoryAllocator.cpp ****             curr->prev->next = newSegm;
  39:src/memoryAllocator.cpp ****             newSegm->prev = curr->prev;
  40:src/memoryAllocator.cpp ****         }
  41:src/memoryAllocator.cpp ****         else {
  42:src/memoryAllocator.cpp ****             freeSegmentHead = newSegm;
  43:src/memoryAllocator.cpp ****             freeSegmentHead->prev = nullptr;
  44:src/memoryAllocator.cpp ****         }
  45:src/memoryAllocator.cpp ****         if(curr->next)
  46:src/memoryAllocator.cpp ****             curr->next->prev = newSegm;
  47:src/memoryAllocator.cpp ****         newSegm->next = curr->next;
GAS LISTING /tmp/ccyGJl9w.s 			page 2


  48:src/memoryAllocator.cpp **** 
  49:src/memoryAllocator.cpp ****         newSegm->size = remainingSize - MEM_BLOCK_SIZE; //zbog njegovog zaglavlja
  50:src/memoryAllocator.cpp ****     }
  51:src/memoryAllocator.cpp **** 
  52:src/memoryAllocator.cpp ****     curr->next = nullptr; //potpuno se odvezuje cvor
  53:src/memoryAllocator.cpp **** 
  54:src/memoryAllocator.cpp ****     //zaglavlje zauzetog segmenta nalazi se odmah posle slobodnog
  55:src/memoryAllocator.cpp ****     UsedSegment* used = (UsedSegment*)((char*)curr + sizeof(FreeSegment));
  56:src/memoryAllocator.cpp ****     used->size = size;
  57:src/memoryAllocator.cpp **** 
  58:src/memoryAllocator.cpp ****     if(!usedSegmentHead) {
  59:src/memoryAllocator.cpp ****         usedSegmentHead = used;
  60:src/memoryAllocator.cpp ****         usedSegmentHead->next = nullptr;
  61:src/memoryAllocator.cpp ****     }
  62:src/memoryAllocator.cpp ****     else {
  63:src/memoryAllocator.cpp ****         used->next = usedSegmentHead;
  64:src/memoryAllocator.cpp ****         usedSegmentHead = used;
  65:src/memoryAllocator.cpp ****     }
  66:src/memoryAllocator.cpp **** 
  67:src/memoryAllocator.cpp ****     return (char*)curr + MEM_BLOCK_SIZE; //vraca se adresa nakon zaglavlja
  68:src/memoryAllocator.cpp **** }
  69:src/memoryAllocator.cpp **** 
  70:src/memoryAllocator.cpp **** 
  71:src/memoryAllocator.cpp **** 
  72:src/memoryAllocator.cpp **** void MemoryAllocator::mem_init() {
  12              		.loc 1 72 34
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  73:src/memoryAllocator.cpp ****     freeSegmentHead = (FreeSegment*)HEAP_START_ADDR; //pocetak heap-a
  20              		.loc 1 73 5
  21              		.loc 1 73 21 is_stmt 0
  22 000c 97070000 		la	a5,HEAP_START_ADDR
  22      83B70700 
  23 0014 83B60700 		ld	a3,0(a5)
  24 0018 17070000 		lla	a4,.LANCHOR0
  24      13070700 
  25 0020 2330D700 		sd	a3,0(a4)
  74:src/memoryAllocator.cpp **** 
  75:src/memoryAllocator.cpp ****     freeSegmentHead->size = (((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR) / MEM_BLOCK_SIZE - 1
  26              		.loc 1 75 5 is_stmt 1
  27              		.loc 1 75 53 is_stmt 0
  28 0024 97070000 		la	a5,HEAP_END_ADDR
  28      83B70700 
  29 002c 83B70700 		ld	a5,0(a5)
  30 0030 B387D740 		sub	a5,a5,a3
  31              		.loc 1 75 80
  32 0034 93D76700 		srli	a5,a5,6
  33              		.loc 1 75 97
  34 0038 9387F7FF 		addi	a5,a5,-1
  35              		.loc 1 75 102
  36 003c 93976700 		slli	a5,a5,6
  37              		.loc 1 75 27
GAS LISTING /tmp/ccyGJl9w.s 			page 3


  38 0040 23B0F600 		sd	a5,0(a3)
  76:src/memoryAllocator.cpp **** 
  77:src/memoryAllocator.cpp ****     freeSegmentHead->next = nullptr; freeSegmentHead->prev = nullptr;
  39              		.loc 1 77 5 is_stmt 1
  40              		.loc 1 77 22 is_stmt 0
  41 0044 83370700 		ld	a5,0(a4)
  42              		.loc 1 77 27
  43 0048 23B40700 		sd	zero,8(a5)
  44              		.loc 1 77 38 is_stmt 1
  45              		.loc 1 77 60 is_stmt 0
  46 004c 23B80700 		sd	zero,16(a5)
  78:src/memoryAllocator.cpp **** 
  79:src/memoryAllocator.cpp ****     usedSegmentHead = nullptr;
  47              		.loc 1 79 5 is_stmt 1
  48              		.loc 1 79 21 is_stmt 0
  49 0050 23340700 		sd	zero,8(a4)
  80:src/memoryAllocator.cpp **** }
  50              		.loc 1 80 1
  51 0054 03348100 		ld	s0,8(sp)
  52              		.cfi_restore 8
  53              		.cfi_def_cfa 2, 16
  54 0058 13010101 		addi	sp,sp,16
  55              		.cfi_def_cfa_offset 0
  56 005c 67800000 		jr	ra
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.align	2
  61              		.globl	_ZN15MemoryAllocator9mem_allocEm
  63              	_ZN15MemoryAllocator9mem_allocEm:
  64              	.LFB3:
   7:src/memoryAllocator.cpp ****     if(size <= 0) return nullptr;
  65              		.loc 1 7 47 is_stmt 1
  66              		.cfi_startproc
  67              	.LVL0:
   8:src/memoryAllocator.cpp **** 
  68              		.loc 1 8 5
  69 0060 63040514 		beqz	a0,.L17
   7:src/memoryAllocator.cpp ****     if(size <= 0) return nullptr;
  70              		.loc 1 7 47 is_stmt 0
  71 0064 130101FE 		addi	sp,sp,-32
  72              		.cfi_def_cfa_offset 32
  73 0068 233C1100 		sd	ra,24(sp)
  74 006c 23388100 		sd	s0,16(sp)
  75 0070 23349100 		sd	s1,8(sp)
  76              		.cfi_offset 1, -8
  77              		.cfi_offset 8, -16
  78              		.cfi_offset 9, -24
  79 0074 13040102 		addi	s0,sp,32
  80              		.cfi_def_cfa 8, 0
  10:src/memoryAllocator.cpp **** 
  81              		.loc 1 10 5 is_stmt 1
  10:src/memoryAllocator.cpp **** 
  82              		.loc 1 10 10 is_stmt 0
  83 0078 93146500 		slli	s1,a0,6
  84              	.LVL1:
  13:src/memoryAllocator.cpp ****         mem_init();
  85              		.loc 1 13 5 is_stmt 1
GAS LISTING /tmp/ccyGJl9w.s 			page 4


  13:src/memoryAllocator.cpp ****         mem_init();
  86              		.loc 1 13 8 is_stmt 0
  87 007c 97070000 		lbu	a5,.LANCHOR0+16
  87      83C70700 
  13:src/memoryAllocator.cpp ****         mem_init();
  88              		.loc 1 13 5
  89 0084 63800702 		beqz	a5,.L22
  90              	.L5:
  19:src/memoryAllocator.cpp ****     for(; curr && curr->size < size; curr = curr->next);
  91              		.loc 1 19 5 is_stmt 1
  19:src/memoryAllocator.cpp ****     for(; curr && curr->size < size; curr = curr->next);
  92              		.loc 1 19 18 is_stmt 0
  93 0088 17050000 		ld	a0,.LANCHOR0
  93      03350500 
  94              	.LVL2:
  95              	.L7:
  20:src/memoryAllocator.cpp ****     if(!curr) return nullptr;
  96              		.loc 1 20 5 is_stmt 1 discriminator 3
  20:src/memoryAllocator.cpp ****     if(!curr) return nullptr;
  97              		.loc 1 20 16 discriminator 3
  98 0090 63060502 		beqz	a0,.L6
  20:src/memoryAllocator.cpp ****     if(!curr) return nullptr;
  99              		.loc 1 20 25 is_stmt 0 discriminator 1
 100 0094 83370500 		ld	a5,0(a0)
  20:src/memoryAllocator.cpp ****     if(!curr) return nullptr;
 101              		.loc 1 20 16 discriminator 1
 102 0098 63F29702 		bgeu	a5,s1,.L6
  20:src/memoryAllocator.cpp ****     if(!curr) return nullptr;
 103              		.loc 1 20 5 is_stmt 1 discriminator 2
  20:src/memoryAllocator.cpp ****     if(!curr) return nullptr;
 104              		.loc 1 20 43 is_stmt 0 discriminator 2
 105 009c 03358500 		ld	a0,8(a0)
 106              	.LVL3:
  20:src/memoryAllocator.cpp ****     if(!curr) return nullptr;
 107              		.loc 1 20 5 discriminator 2
 108 00a0 6FF01FFF 		j	.L7
 109              	.LVL4:
 110              	.L22:
  14:src/memoryAllocator.cpp ****         initialized = true;
 111              		.loc 1 14 9 is_stmt 1
  14:src/memoryAllocator.cpp ****         initialized = true;
 112              		.loc 1 14 17 is_stmt 0
 113 00a4 97000000 		call	_ZN15MemoryAllocator8mem_initEv
 113      E7800000 
 114              	.LVL5:
  15:src/memoryAllocator.cpp ****     }
 115              		.loc 1 15 9 is_stmt 1
  15:src/memoryAllocator.cpp ****     }
 116              		.loc 1 15 21 is_stmt 0
 117 00ac 93071000 		li	a5,1
 118 00b0 17070000 		sb	a5,.LANCHOR0+16,a4
 118      2300F700 
 119 00b8 6FF01FFD 		j	.L5
 120              	.LVL6:
 121              	.L6:
  21:src/memoryAllocator.cpp **** 
 122              		.loc 1 21 5 is_stmt 1
GAS LISTING /tmp/ccyGJl9w.s 			page 5


 123 00bc 630C050A 		beqz	a0,.L3
  23:src/memoryAllocator.cpp ****     curr->size = size;
 124              		.loc 1 23 5
  23:src/memoryAllocator.cpp ****     curr->size = size;
 125              		.loc 1 23 34 is_stmt 0
 126 00c0 83370500 		ld	a5,0(a0)
  23:src/memoryAllocator.cpp ****     curr->size = size;
 127              		.loc 1 23 12
 128 00c4 B3879740 		sub	a5,a5,s1
 129              	.LVL7:
  24:src/memoryAllocator.cpp ****     if(remainingSize < 2 * MEM_BLOCK_SIZE) { //ako je preostali prostor manji od jednog bloka(drugi
 130              		.loc 1 24 5 is_stmt 1
  24:src/memoryAllocator.cpp ****     if(remainingSize < 2 * MEM_BLOCK_SIZE) { //ako je preostali prostor manji od jednog bloka(drugi
 131              		.loc 1 24 16 is_stmt 0
 132 00c8 23309500 		sd	s1,0(a0)
  25:src/memoryAllocator.cpp ****         if(freeSegmentHead == curr) freeSegmentHead = curr->next;
 133              		.loc 1 25 5 is_stmt 1
 134              	.LBB2:
 135 00cc 1307F007 		li	a4,127
 136 00d0 6362F704 		bgtu	a5,a4,.L8
  26:src/memoryAllocator.cpp **** 
 137              		.loc 1 26 9
  26:src/memoryAllocator.cpp **** 
 138              		.loc 1 26 28 is_stmt 0
 139 00d4 97070000 		ld	a5,.LANCHOR0
 139      83B70700 
 140              	.LVL8:
  26:src/memoryAllocator.cpp **** 
 141              		.loc 1 26 9
 142 00dc 6384A702 		beq	a5,a0,.L23
 143              	.L9:
  28:src/memoryAllocator.cpp **** 
 144              		.loc 1 28 9 is_stmt 1
  28:src/memoryAllocator.cpp **** 
 145              		.loc 1 28 18 is_stmt 0
 146 00e0 83378500 		ld	a5,8(a0)
  28:src/memoryAllocator.cpp **** 
 147              		.loc 1 28 9
 148 00e4 63860700 		beqz	a5,.L10
  28:src/memoryAllocator.cpp **** 
 149              		.loc 1 28 24 is_stmt 1 discriminator 1
  28:src/memoryAllocator.cpp **** 
 150              		.loc 1 28 49 is_stmt 0 discriminator 1
 151 00e8 03370501 		ld	a4,16(a0)
  28:src/memoryAllocator.cpp **** 
 152              		.loc 1 28 41 discriminator 1
 153 00ec 23B8E700 		sd	a4,16(a5)
 154              	.L10:
  30:src/memoryAllocator.cpp ****     } else {
 155              		.loc 1 30 9 is_stmt 1
  30:src/memoryAllocator.cpp ****     } else {
 156              		.loc 1 30 18 is_stmt 0
 157 00f0 83370501 		ld	a5,16(a0)
  30:src/memoryAllocator.cpp ****     } else {
 158              		.loc 1 30 9
 159 00f4 638C0704 		beqz	a5,.L11
  30:src/memoryAllocator.cpp ****     } else {
GAS LISTING /tmp/ccyGJl9w.s 			page 6


 160              		.loc 1 30 24 is_stmt 1 discriminator 1
  30:src/memoryAllocator.cpp ****     } else {
 161              		.loc 1 30 49 is_stmt 0 discriminator 1
 162 00f8 03378500 		ld	a4,8(a0)
  30:src/memoryAllocator.cpp ****     } else {
 163              		.loc 1 30 41 discriminator 1
 164 00fc 23B4E700 		sd	a4,8(a5)
 165 0100 6F00C004 		j	.L11
 166              	.L23:
  26:src/memoryAllocator.cpp **** 
 167              		.loc 1 26 37 is_stmt 1 discriminator 1
  26:src/memoryAllocator.cpp **** 
 168              		.loc 1 26 61 is_stmt 0 discriminator 1
 169 0104 83378500 		ld	a5,8(a0)
  26:src/memoryAllocator.cpp **** 
 170              		.loc 1 26 53 discriminator 1
 171 0108 17070000 		sd	a5,.LANCHOR0,a4
 171      2330F700 
 172 0110 6FF01FFD 		j	.L9
 173              	.LVL9:
 174              	.L8:
 175              	.LBB3:
  33:src/memoryAllocator.cpp ****         FreeSegment* newSegm = (FreeSegment*)((char*)curr + offset);
 176              		.loc 1 33 9 is_stmt 1
  33:src/memoryAllocator.cpp ****         FreeSegment* newSegm = (FreeSegment*)((char*)curr + offset);
 177              		.loc 1 33 16 is_stmt 0
 178 0114 13870404 		addi	a4,s1,64
 179              	.LVL10:
  34:src/memoryAllocator.cpp **** 
 180              		.loc 1 34 9 is_stmt 1
  34:src/memoryAllocator.cpp **** 
 181              		.loc 1 34 22 is_stmt 0
 182 0118 3307E500 		add	a4,a0,a4
 183              	.LVL11:
  37:src/memoryAllocator.cpp ****             curr->prev->next = newSegm;
 184              		.loc 1 37 9 is_stmt 1
  37:src/memoryAllocator.cpp ****             curr->prev->next = newSegm;
 185              		.loc 1 37 19 is_stmt 0
 186 011c 83360501 		ld	a3,16(a0)
  37:src/memoryAllocator.cpp ****             curr->prev->next = newSegm;
 187              		.loc 1 37 9
 188 0120 63840606 		beqz	a3,.L12
  38:src/memoryAllocator.cpp ****             newSegm->prev = curr->prev;
 189              		.loc 1 38 13 is_stmt 1
  38:src/memoryAllocator.cpp ****             newSegm->prev = curr->prev;
 190              		.loc 1 38 30 is_stmt 0
 191 0124 23B4E600 		sd	a4,8(a3)
  39:src/memoryAllocator.cpp ****         }
 192              		.loc 1 39 13 is_stmt 1
  39:src/memoryAllocator.cpp ****         }
 193              		.loc 1 39 35 is_stmt 0
 194 0128 83360501 		ld	a3,16(a0)
  39:src/memoryAllocator.cpp ****         }
 195              		.loc 1 39 27
 196 012c 2338D700 		sd	a3,16(a4)
 197              	.L13:
  45:src/memoryAllocator.cpp ****             curr->next->prev = newSegm;
GAS LISTING /tmp/ccyGJl9w.s 			page 7


 198              		.loc 1 45 9 is_stmt 1
  45:src/memoryAllocator.cpp ****             curr->next->prev = newSegm;
 199              		.loc 1 45 18 is_stmt 0
 200 0130 83368500 		ld	a3,8(a0)
  45:src/memoryAllocator.cpp ****             curr->next->prev = newSegm;
 201              		.loc 1 45 9
 202 0134 63840600 		beqz	a3,.L14
  46:src/memoryAllocator.cpp ****         newSegm->next = curr->next;
 203              		.loc 1 46 13 is_stmt 1
  46:src/memoryAllocator.cpp ****         newSegm->next = curr->next;
 204              		.loc 1 46 30 is_stmt 0
 205 0138 23B8E600 		sd	a4,16(a3)
 206              	.L14:
  47:src/memoryAllocator.cpp **** 
 207              		.loc 1 47 9 is_stmt 1
  47:src/memoryAllocator.cpp **** 
 208              		.loc 1 47 31 is_stmt 0
 209 013c 83368500 		ld	a3,8(a0)
  47:src/memoryAllocator.cpp **** 
 210              		.loc 1 47 23
 211 0140 2334D700 		sd	a3,8(a4)
  49:src/memoryAllocator.cpp ****     }
 212              		.loc 1 49 9 is_stmt 1
  49:src/memoryAllocator.cpp ****     }
 213              		.loc 1 49 39 is_stmt 0
 214 0144 938707FC 		addi	a5,a5,-64
 215              	.LVL12:
  49:src/memoryAllocator.cpp ****     }
 216              		.loc 1 49 23
 217 0148 2330F700 		sd	a5,0(a4)
 218              	.LVL13:
 219              	.L11:
 220              	.LBE3:
 221              	.LBE2:
  52:src/memoryAllocator.cpp **** 
 222              		.loc 1 52 5 is_stmt 1
  52:src/memoryAllocator.cpp **** 
 223              		.loc 1 52 16 is_stmt 0
 224 014c 23340500 		sd	zero,8(a0)
  55:src/memoryAllocator.cpp ****     used->size = size;
 225              		.loc 1 55 5 is_stmt 1
  55:src/memoryAllocator.cpp ****     used->size = size;
 226              		.loc 1 55 18 is_stmt 0
 227 0150 13078501 		addi	a4,a0,24
 228              	.LVL14:
  56:src/memoryAllocator.cpp **** 
 229              		.loc 1 56 5 is_stmt 1
  56:src/memoryAllocator.cpp **** 
 230              		.loc 1 56 16 is_stmt 0
 231 0154 233C9500 		sd	s1,24(a0)
  58:src/memoryAllocator.cpp ****         usedSegmentHead = used;
 232              		.loc 1 58 5 is_stmt 1
  58:src/memoryAllocator.cpp ****         usedSegmentHead = used;
 233              		.loc 1 58 8 is_stmt 0
 234 0158 97070000 		ld	a5,.LANCHOR0+8
 234      83B70700 
  58:src/memoryAllocator.cpp ****         usedSegmentHead = used;
GAS LISTING /tmp/ccyGJl9w.s 			page 8


 235              		.loc 1 58 5
 236 0160 638C0702 		beqz	a5,.L24
  63:src/memoryAllocator.cpp ****         usedSegmentHead = used;
 237              		.loc 1 63 9 is_stmt 1
  63:src/memoryAllocator.cpp ****         usedSegmentHead = used;
 238              		.loc 1 63 20 is_stmt 0
 239 0164 2330F502 		sd	a5,32(a0)
  64:src/memoryAllocator.cpp ****     }
 240              		.loc 1 64 9 is_stmt 1
  64:src/memoryAllocator.cpp ****     }
 241              		.loc 1 64 25 is_stmt 0
 242 0168 97070000 		sd	a4,.LANCHOR0+8,a5
 242      23B0E700 
 243              	.L16:
  67:src/memoryAllocator.cpp **** }
 244              		.loc 1 67 5 is_stmt 1
  67:src/memoryAllocator.cpp **** }
 245              		.loc 1 67 26 is_stmt 0
 246 0170 13050504 		addi	a0,a0,64
 247              	.LVL15:
 248              	.L3:
  68:src/memoryAllocator.cpp **** 
 249              		.loc 1 68 1
 250 0174 83308101 		ld	ra,24(sp)
 251              		.cfi_remember_state
 252              		.cfi_restore 1
 253 0178 03340101 		ld	s0,16(sp)
 254              		.cfi_restore 8
 255              		.cfi_def_cfa 2, 32
 256 017c 83348100 		ld	s1,8(sp)
 257              		.cfi_restore 9
 258              	.LVL16:
 259 0180 13010102 		addi	sp,sp,32
 260              		.cfi_def_cfa_offset 0
 261 0184 67800000 		jr	ra
 262              	.LVL17:
 263              	.L12:
 264              		.cfi_restore_state
 265              	.LBB5:
 266              	.LBB4:
  42:src/memoryAllocator.cpp ****             freeSegmentHead->prev = nullptr;
 267              		.loc 1 42 13 is_stmt 1
  42:src/memoryAllocator.cpp ****             freeSegmentHead->prev = nullptr;
 268              		.loc 1 42 29 is_stmt 0
 269 0188 97060000 		sd	a4,.LANCHOR0,a3
 269      23B0E600 
  43:src/memoryAllocator.cpp ****         }
 270              		.loc 1 43 13 is_stmt 1
  43:src/memoryAllocator.cpp ****         }
 271              		.loc 1 43 35 is_stmt 0
 272 0190 23380700 		sd	zero,16(a4)
 273 0194 6FF0DFF9 		j	.L13
 274              	.LVL18:
 275              	.L24:
 276              	.LBE4:
 277              	.LBE5:
  59:src/memoryAllocator.cpp ****         usedSegmentHead->next = nullptr;
GAS LISTING /tmp/ccyGJl9w.s 			page 9


 278              		.loc 1 59 9 is_stmt 1
  59:src/memoryAllocator.cpp ****         usedSegmentHead->next = nullptr;
 279              		.loc 1 59 25 is_stmt 0
 280 0198 97070000 		sd	a4,.LANCHOR0+8,a5
 280      23B0E700 
  60:src/memoryAllocator.cpp ****     }
 281              		.loc 1 60 9 is_stmt 1
  60:src/memoryAllocator.cpp ****     }
 282              		.loc 1 60 31 is_stmt 0
 283 01a0 23340700 		sd	zero,8(a4)
 284 01a4 6FF0DFFC 		j	.L16
 285              	.LVL19:
 286              	.L17:
 287              		.cfi_def_cfa_register 2
 288              		.cfi_restore 1
 289              		.cfi_restore 8
 290              		.cfi_restore 9
   8:src/memoryAllocator.cpp **** 
 291              		.loc 1 8 26
 292 01a8 13050000 		li	a0,0
 293              	.LVL20:
  68:src/memoryAllocator.cpp **** 
 294              		.loc 1 68 1
 295 01ac 67800000 		ret
 296              		.cfi_endproc
 297              	.LFE3:
 299              		.align	2
 300              		.globl	_ZN15MemoryAllocator9tryToJoinEPNS_11FreeSegmentE
 302              	_ZN15MemoryAllocator9tryToJoinEPNS_11FreeSegmentE:
 303              	.LFB6:
  81:src/memoryAllocator.cpp **** 
  82:src/memoryAllocator.cpp **** int MemoryAllocator::mem_free(void *addr) {
  83:src/memoryAllocator.cpp ****     if(!addr) return -1;
  84:src/memoryAllocator.cpp **** 
  85:src/memoryAllocator.cpp ****     //pokusava da se u listi zauzetih pronadje trazena adresa
  86:src/memoryAllocator.cpp ****     UsedSegment* curr = usedSegmentHead, *prev = nullptr;
  87:src/memoryAllocator.cpp ****     for(; (curr != nullptr) & ((char*)curr - sizeof(FreeSegment) + MEM_BLOCK_SIZE != (char*)addr);
  88:src/memoryAllocator.cpp ****     prev = curr, curr = curr->next);
  89:src/memoryAllocator.cpp ****     if(!curr) return -1;
  90:src/memoryAllocator.cpp **** 
  91:src/memoryAllocator.cpp ****     //izbacivanje iz liste zauzetih ako je pronadjen
  92:src/memoryAllocator.cpp ****     if(prev) {
  93:src/memoryAllocator.cpp ****         prev->next = curr->next;
  94:src/memoryAllocator.cpp ****     }
  95:src/memoryAllocator.cpp ****     else usedSegmentHead = curr->next;
  96:src/memoryAllocator.cpp **** 
  97:src/memoryAllocator.cpp ****     //trazi se prethodnik od segmenta koji cemo da ubacimo
  98:src/memoryAllocator.cpp ****     FreeSegment* fcurr = nullptr;
  99:src/memoryAllocator.cpp ****     if(freeSegmentHead && (char*)freeSegmentHead < (char*)addr) //ako uslov nije ispunjen segment p
 100:src/memoryAllocator.cpp ****         for(fcurr = freeSegmentHead; fcurr->next && (char*)addr > (char*)(fcurr->next); fcurr = fcu
 101:src/memoryAllocator.cpp **** 
 102:src/memoryAllocator.cpp ****     FreeSegment* newSeg = (FreeSegment*)((char*)addr - MEM_BLOCK_SIZE);
 103:src/memoryAllocator.cpp ****     newSeg->size = curr->size;
 104:src/memoryAllocator.cpp **** 
 105:src/memoryAllocator.cpp ****     //uvezivanje u listu slobodnih
 106:src/memoryAllocator.cpp ****     newSeg->prev = fcurr;
 107:src/memoryAllocator.cpp ****     if (fcurr) newSeg->next = fcurr->next;
GAS LISTING /tmp/ccyGJl9w.s 			page 10


 108:src/memoryAllocator.cpp ****     else newSeg->next = freeSegmentHead;
 109:src/memoryAllocator.cpp ****     if (newSeg->next) newSeg->next->prev = newSeg;
 110:src/memoryAllocator.cpp ****     if (fcurr) fcurr->next = newSeg;
 111:src/memoryAllocator.cpp ****     else freeSegmentHead = newSeg;
 112:src/memoryAllocator.cpp **** 
 113:src/memoryAllocator.cpp ****     tryToJoin(newSeg);
 114:src/memoryAllocator.cpp ****     tryToJoin(fcurr);
 115:src/memoryAllocator.cpp **** 
 116:src/memoryAllocator.cpp ****     return 0;
 117:src/memoryAllocator.cpp **** }
 118:src/memoryAllocator.cpp **** 
 119:src/memoryAllocator.cpp **** void MemoryAllocator::tryToJoin(FreeSegment *curr) {
 304              		.loc 1 119 52 is_stmt 1
 305              		.cfi_startproc
 306              	.LVL21:
 307 01b0 130101FF 		addi	sp,sp,-16
 308              		.cfi_def_cfa_offset 16
 309 01b4 23348100 		sd	s0,8(sp)
 310              		.cfi_offset 8, -8
 311 01b8 13040101 		addi	s0,sp,16
 312              		.cfi_def_cfa 8, 0
 120:src/memoryAllocator.cpp ****     if (!curr) return;
 313              		.loc 1 120 5
 314 01bc 630E0500 		beqz	a0,.L25
 121:src/memoryAllocator.cpp **** 
 122:src/memoryAllocator.cpp ****     //da li je kraj jednog bloka jednak pocetku drugog
 123:src/memoryAllocator.cpp ****     if (curr->next && (char*)curr + curr->size == (char*)(curr->next) - MEM_BLOCK_SIZE) {
 315              		.loc 1 123 5
 316              		.loc 1 123 15 is_stmt 0
 317 01c0 83378500 		ld	a5,8(a0)
 318              		.loc 1 123 5
 319 01c4 638A0700 		beqz	a5,.L25
 320              		.loc 1 123 43 discriminator 1
 321 01c8 03370500 		ld	a4,0(a0)
 322              		.loc 1 123 35 discriminator 1
 323 01cc 3306E500 		add	a2,a0,a4
 324              		.loc 1 123 71 discriminator 1
 325 01d0 938607FC 		addi	a3,a5,-64
 326              		.loc 1 123 20 discriminator 1
 327 01d4 6308D600 		beq	a2,a3,.L28
 328              	.L25:
 124:src/memoryAllocator.cpp ****         curr->size += curr->next->size + MEM_BLOCK_SIZE;
 125:src/memoryAllocator.cpp ****         curr->next = curr->next->next;
 126:src/memoryAllocator.cpp ****         if (curr->next) curr->next->prev = curr;
 127:src/memoryAllocator.cpp ****     }
 128:src/memoryAllocator.cpp **** }
 329              		.loc 1 128 1
 330 01d8 03348100 		ld	s0,8(sp)
 331              		.cfi_remember_state
 332              		.cfi_restore 8
 333              		.cfi_def_cfa 2, 16
 334 01dc 13010101 		addi	sp,sp,16
 335              		.cfi_def_cfa_offset 0
 336 01e0 67800000 		jr	ra
 337              	.L28:
 338              		.cfi_restore_state
 124:src/memoryAllocator.cpp ****         curr->size += curr->next->size + MEM_BLOCK_SIZE;
GAS LISTING /tmp/ccyGJl9w.s 			page 11


 339              		.loc 1 124 9 is_stmt 1
 124:src/memoryAllocator.cpp ****         curr->size += curr->next->size + MEM_BLOCK_SIZE;
 340              		.loc 1 124 35 is_stmt 0
 341 01e4 83B60700 		ld	a3,0(a5)
 124:src/memoryAllocator.cpp ****         curr->size += curr->next->size + MEM_BLOCK_SIZE;
 342              		.loc 1 124 20
 343 01e8 3307D700 		add	a4,a4,a3
 344 01ec 13070704 		addi	a4,a4,64
 345 01f0 2330E500 		sd	a4,0(a0)
 125:src/memoryAllocator.cpp ****         if (curr->next) curr->next->prev = curr;
 346              		.loc 1 125 9 is_stmt 1
 125:src/memoryAllocator.cpp ****         if (curr->next) curr->next->prev = curr;
 347              		.loc 1 125 34 is_stmt 0
 348 01f4 83B78700 		ld	a5,8(a5)
 125:src/memoryAllocator.cpp ****         if (curr->next) curr->next->prev = curr;
 349              		.loc 1 125 20
 350 01f8 2334F500 		sd	a5,8(a0)
 126:src/memoryAllocator.cpp ****     }
 351              		.loc 1 126 9 is_stmt 1
 352 01fc E38E07FC 		beqz	a5,.L25
 126:src/memoryAllocator.cpp ****     }
 353              		.loc 1 126 25 discriminator 1
 126:src/memoryAllocator.cpp ****     }
 354              		.loc 1 126 42 is_stmt 0 discriminator 1
 355 0200 23B8A700 		sd	a0,16(a5)
 356 0204 6FF05FFD 		j	.L25
 357              		.cfi_endproc
 358              	.LFE6:
 360              		.align	2
 361              		.globl	_ZN15MemoryAllocator8mem_freeEPv
 363              	_ZN15MemoryAllocator8mem_freeEPv:
 364              	.LFB5:
  82:src/memoryAllocator.cpp ****     if(!addr) return -1;
 365              		.loc 1 82 43 is_stmt 1
 366              		.cfi_startproc
 367              	.LVL22:
  83:src/memoryAllocator.cpp **** 
 368              		.loc 1 83 5
 369 0208 630C0510 		beqz	a0,.L42
 370 020c 13060500 		mv	a2,a0
  86:src/memoryAllocator.cpp ****     for(; (curr != nullptr) & ((char*)curr - sizeof(FreeSegment) + MEM_BLOCK_SIZE != (char*)addr);
 371              		.loc 1 86 5
  86:src/memoryAllocator.cpp ****     for(; (curr != nullptr) & ((char*)curr - sizeof(FreeSegment) + MEM_BLOCK_SIZE != (char*)addr);
 372              		.loc 1 86 18 is_stmt 0
 373 0210 97060000 		ld	a3,.LANCHOR0+8
 373      83B60600 
 374              	.LVL23:
  86:src/memoryAllocator.cpp ****     for(; (curr != nullptr) & ((char*)curr - sizeof(FreeSegment) + MEM_BLOCK_SIZE != (char*)addr);
 375              		.loc 1 86 43
 376 0218 93050000 		li	a1,0
 377              	.LVL24:
 378              	.L32:
  87:src/memoryAllocator.cpp ****     prev = curr, curr = curr->next);
 379              		.loc 1 87 5 is_stmt 1
  87:src/memoryAllocator.cpp ****     prev = curr, curr = curr->next);
 380              		.loc 1 87 97
  87:src/memoryAllocator.cpp ****     prev = curr, curr = curr->next);
GAS LISTING /tmp/ccyGJl9w.s 			page 12


 381              		.loc 1 87 66 is_stmt 0
 382 021c 13878602 		addi	a4,a3,40
  87:src/memoryAllocator.cpp ****     prev = curr, curr = curr->next);
 383              		.loc 1 87 29
 384 0220 B337D000 		snez	a5,a3
 385 0224 3307C740 		sub	a4,a4,a2
 386 0228 3337E000 		snez	a4,a4
 387 022c B3F7E700 		and	a5,a5,a4
 388 0230 93F7F70F 		andi	a5,a5,0xff
  87:src/memoryAllocator.cpp ****     prev = curr, curr = curr->next);
 389              		.loc 1 87 97
 390 0234 63880700 		beqz	a5,.L31
  87:src/memoryAllocator.cpp ****     prev = curr, curr = curr->next);
 391              		.loc 1 87 5 is_stmt 1 discriminator 1
 392              	.LVL25:
  88:src/memoryAllocator.cpp ****     if(!curr) return -1;
 393              		.loc 1 88 10 is_stmt 0 discriminator 1
 394 0238 93850600 		mv	a1,a3
  88:src/memoryAllocator.cpp ****     if(!curr) return -1;
 395              		.loc 1 88 23 discriminator 1
 396 023c 83B68600 		ld	a3,8(a3)
 397              	.LVL26:
  87:src/memoryAllocator.cpp ****     prev = curr, curr = curr->next);
 398              		.loc 1 87 5 discriminator 1
 399 0240 6FF0DFFD 		j	.L32
 400              	.L31:
  89:src/memoryAllocator.cpp **** 
 401              		.loc 1 89 5 is_stmt 1
 402 0244 6382060E 		beqz	a3,.L43
  82:src/memoryAllocator.cpp ****     if(!addr) return -1;
 403              		.loc 1 82 43 is_stmt 0
 404 0248 130101FE 		addi	sp,sp,-32
 405              		.cfi_def_cfa_offset 32
 406 024c 233C1100 		sd	ra,24(sp)
 407 0250 23388100 		sd	s0,16(sp)
 408 0254 23349100 		sd	s1,8(sp)
 409              		.cfi_offset 1, -8
 410              		.cfi_offset 8, -16
 411              		.cfi_offset 9, -24
 412 0258 13040102 		addi	s0,sp,32
 413              		.cfi_def_cfa 8, 0
  92:src/memoryAllocator.cpp ****         prev->next = curr->next;
 414              		.loc 1 92 5 is_stmt 1
 415 025c 63880502 		beqz	a1,.L33
  93:src/memoryAllocator.cpp ****     }
 416              		.loc 1 93 9
  93:src/memoryAllocator.cpp ****     }
 417              		.loc 1 93 28 is_stmt 0
 418 0260 83B78600 		ld	a5,8(a3)
  93:src/memoryAllocator.cpp ****     }
 419              		.loc 1 93 20
 420 0264 23B4F500 		sd	a5,8(a1)
 421              	.L34:
  98:src/memoryAllocator.cpp ****     if(freeSegmentHead && (char*)freeSegmentHead < (char*)addr) //ako uslov nije ispunjen segment p
 422              		.loc 1 98 5 is_stmt 1
 423              	.LVL27:
  99:src/memoryAllocator.cpp ****         for(fcurr = freeSegmentHead; fcurr->next && (char*)addr > (char*)(fcurr->next); fcurr = fcu
GAS LISTING /tmp/ccyGJl9w.s 			page 13


 424              		.loc 1 99 5
  99:src/memoryAllocator.cpp ****         for(fcurr = freeSegmentHead; fcurr->next && (char*)addr > (char*)(fcurr->next); fcurr = fcu
 425              		.loc 1 99 59 is_stmt 0
 426 0268 97070000 		ld	a5,.LANCHOR0
 426      83B70700 
  99:src/memoryAllocator.cpp ****         for(fcurr = freeSegmentHead; fcurr->next && (char*)addr > (char*)(fcurr->next); fcurr = fcu
 427              		.loc 1 99 5
 428 0270 63860702 		beqz	a5,.L44
  99:src/memoryAllocator.cpp ****         for(fcurr = freeSegmentHead; fcurr->next && (char*)addr > (char*)(fcurr->next); fcurr = fcu
 429              		.loc 1 99 24 discriminator 1
 430 0274 63F8C702 		bgeu	a5,a2,.L45
 431              	.LVL28:
 432              	.L36:
 100:src/memoryAllocator.cpp **** 
 433              		.loc 1 100 50 is_stmt 1 discriminator 4
 434 0278 93840700 		mv	s1,a5
 100:src/memoryAllocator.cpp **** 
 435              		.loc 1 100 45 is_stmt 0 discriminator 4
 436 027c 83B78700 		ld	a5,8(a5)
 437              	.LVL29:
 100:src/memoryAllocator.cpp **** 
 438              		.loc 1 100 50 discriminator 4
 439 0280 63840702 		beqz	a5,.L35
 100:src/memoryAllocator.cpp **** 
 440              		.loc 1 100 50 discriminator 2
 441 0284 E3EAC7FE 		bltu	a5,a2,.L36
 442 0288 6F000002 		j	.L35
 443              	.LVL30:
 444              	.L33:
  95:src/memoryAllocator.cpp **** 
 445              		.loc 1 95 10 is_stmt 1
  95:src/memoryAllocator.cpp **** 
 446              		.loc 1 95 34 is_stmt 0
 447 028c 83B78600 		ld	a5,8(a3)
  95:src/memoryAllocator.cpp **** 
 448              		.loc 1 95 26
 449 0290 17070000 		sd	a5,.LANCHOR0+8,a4
 449      2330F700 
 450 0298 6FF01FFD 		j	.L34
 451              	.LVL31:
 452              	.L44:
  98:src/memoryAllocator.cpp ****     if(freeSegmentHead && (char*)freeSegmentHead < (char*)addr) //ako uslov nije ispunjen segment p
 453              		.loc 1 98 18
 454 029c 93840700 		mv	s1,a5
 455 02a0 6F008000 		j	.L35
 456              	.L45:
 457 02a4 93040000 		li	s1,0
 458              	.LVL32:
 459              	.L35:
 102:src/memoryAllocator.cpp ****     newSeg->size = curr->size;
 460              		.loc 1 102 5 is_stmt 1
 102:src/memoryAllocator.cpp ****     newSeg->size = curr->size;
 461              		.loc 1 102 18 is_stmt 0
 462 02a8 130506FC 		addi	a0,a2,-64
 463              	.LVL33:
 103:src/memoryAllocator.cpp **** 
 464              		.loc 1 103 5 is_stmt 1
GAS LISTING /tmp/ccyGJl9w.s 			page 14


 103:src/memoryAllocator.cpp **** 
 465              		.loc 1 103 26 is_stmt 0
 466 02ac 83B70600 		ld	a5,0(a3)
 103:src/memoryAllocator.cpp **** 
 467              		.loc 1 103 18
 468 02b0 2330F6FC 		sd	a5,-64(a2)
 106:src/memoryAllocator.cpp ****     if (fcurr) newSeg->next = fcurr->next;
 469              		.loc 1 106 5 is_stmt 1
 106:src/memoryAllocator.cpp ****     if (fcurr) newSeg->next = fcurr->next;
 470              		.loc 1 106 18 is_stmt 0
 471 02b4 233896FC 		sd	s1,-48(a2)
 107:src/memoryAllocator.cpp ****     else newSeg->next = freeSegmentHead;
 472              		.loc 1 107 5 is_stmt 1
 473 02b8 63860404 		beqz	s1,.L37
 107:src/memoryAllocator.cpp ****     else newSeg->next = freeSegmentHead;
 474              		.loc 1 107 16 discriminator 1
 107:src/memoryAllocator.cpp ****     else newSeg->next = freeSegmentHead;
 475              		.loc 1 107 38 is_stmt 0 discriminator 1
 476 02bc 83B78400 		ld	a5,8(s1)
 107:src/memoryAllocator.cpp ****     else newSeg->next = freeSegmentHead;
 477              		.loc 1 107 29 discriminator 1
 478 02c0 2334F6FC 		sd	a5,-56(a2)
 479              	.L38:
 109:src/memoryAllocator.cpp ****     if (fcurr) fcurr->next = newSeg;
 480              		.loc 1 109 5 is_stmt 1
 109:src/memoryAllocator.cpp ****     if (fcurr) fcurr->next = newSeg;
 481              		.loc 1 109 17 is_stmt 0
 482 02c4 833786FC 		ld	a5,-56(a2)
 109:src/memoryAllocator.cpp ****     if (fcurr) fcurr->next = newSeg;
 483              		.loc 1 109 5
 484 02c8 63840700 		beqz	a5,.L39
 109:src/memoryAllocator.cpp ****     if (fcurr) fcurr->next = newSeg;
 485              		.loc 1 109 23 is_stmt 1 discriminator 1
 109:src/memoryAllocator.cpp ****     if (fcurr) fcurr->next = newSeg;
 486              		.loc 1 109 42 is_stmt 0 discriminator 1
 487 02cc 23B8A700 		sd	a0,16(a5)
 488              	.L39:
 110:src/memoryAllocator.cpp ****     else freeSegmentHead = newSeg;
 489              		.loc 1 110 5 is_stmt 1
 490 02d0 63820404 		beqz	s1,.L40
 110:src/memoryAllocator.cpp ****     else freeSegmentHead = newSeg;
 491              		.loc 1 110 16 discriminator 1
 110:src/memoryAllocator.cpp ****     else freeSegmentHead = newSeg;
 492              		.loc 1 110 28 is_stmt 0 discriminator 1
 493 02d4 23B4A400 		sd	a0,8(s1)
 494              	.L41:
 113:src/memoryAllocator.cpp ****     tryToJoin(fcurr);
 495              		.loc 1 113 5 is_stmt 1
 113:src/memoryAllocator.cpp ****     tryToJoin(fcurr);
 496              		.loc 1 113 14 is_stmt 0
 497 02d8 97000000 		call	_ZN15MemoryAllocator9tryToJoinEPNS_11FreeSegmentE
 497      E7800000 
 498              	.LVL34:
 114:src/memoryAllocator.cpp **** 
 499              		.loc 1 114 5 is_stmt 1
 114:src/memoryAllocator.cpp **** 
 500              		.loc 1 114 14 is_stmt 0
GAS LISTING /tmp/ccyGJl9w.s 			page 15


 501 02e0 13850400 		mv	a0,s1
 502 02e4 97000000 		call	_ZN15MemoryAllocator9tryToJoinEPNS_11FreeSegmentE
 502      E7800000 
 503              	.LVL35:
 116:src/memoryAllocator.cpp **** }
 504              		.loc 1 116 5 is_stmt 1
 116:src/memoryAllocator.cpp **** }
 505              		.loc 1 116 12 is_stmt 0
 506 02ec 13050000 		li	a0,0
 117:src/memoryAllocator.cpp **** 
 507              		.loc 1 117 1
 508 02f0 83308101 		ld	ra,24(sp)
 509              		.cfi_remember_state
 510              		.cfi_restore 1
 511 02f4 03340101 		ld	s0,16(sp)
 512              		.cfi_restore 8
 513              		.cfi_def_cfa 2, 32
 514 02f8 83348100 		ld	s1,8(sp)
 515              		.cfi_restore 9
 516              	.LVL36:
 517 02fc 13010102 		addi	sp,sp,32
 518              		.cfi_def_cfa_offset 0
 519 0300 67800000 		jr	ra
 520              	.LVL37:
 521              	.L37:
 522              		.cfi_restore_state
 108:src/memoryAllocator.cpp ****     if (newSeg->next) newSeg->next->prev = newSeg;
 523              		.loc 1 108 10 is_stmt 1
 108:src/memoryAllocator.cpp ****     if (newSeg->next) newSeg->next->prev = newSeg;
 524              		.loc 1 108 23 is_stmt 0
 525 0304 97070000 		ld	a5,.LANCHOR0
 525      83B70700 
 526 030c 2334F6FC 		sd	a5,-56(a2)
 527 0310 6FF05FFB 		j	.L38
 528              	.L40:
 111:src/memoryAllocator.cpp **** 
 529              		.loc 1 111 10 is_stmt 1
 111:src/memoryAllocator.cpp **** 
 530              		.loc 1 111 26 is_stmt 0
 531 0314 97070000 		sd	a0,.LANCHOR0,a5
 531      23B0A700 
 532 031c 6FF0DFFB 		j	.L41
 533              	.LVL38:
 534              	.L42:
 535              		.cfi_def_cfa_register 2
 536              		.cfi_restore 1
 537              		.cfi_restore 8
 538              		.cfi_restore 9
  83:src/memoryAllocator.cpp **** 
 539              		.loc 1 83 23
 540 0320 1305F0FF 		li	a0,-1
 541              	.LVL39:
 542 0324 67800000 		ret
 543              	.LVL40:
 544              	.L43:
  89:src/memoryAllocator.cpp **** 
 545              		.loc 1 89 23
GAS LISTING /tmp/ccyGJl9w.s 			page 16


 546 0328 1305F0FF 		li	a0,-1
 547              	.LVL41:
 117:src/memoryAllocator.cpp **** 
 548              		.loc 1 117 1
 549 032c 67800000 		ret
 550              		.cfi_endproc
 551              	.LFE5:
 553              		.globl	_ZN15MemoryAllocator11initializedE
 554              		.globl	_ZN15MemoryAllocator15usedSegmentHeadE
 555              		.globl	_ZN15MemoryAllocator15freeSegmentHeadE
 556              		.bss
 557              		.align	3
 558              		.set	.LANCHOR0,. + 0
 561              	_ZN15MemoryAllocator15freeSegmentHeadE:
 562 0000 00000000 		.zero	8
 562      00000000 
 565              	_ZN15MemoryAllocator15usedSegmentHeadE:
 566 0008 00000000 		.zero	8
 566      00000000 
 569              	_ZN15MemoryAllocator11initializedE:
 570 0010 00       		.zero	1
 571              		.text
 572              	.Letext0:
 573              		.file 2 "src/../h/../lib/hw.h"
 574              		.file 3 "src/../h/memoryAllocator.h"
GAS LISTING /tmp/ccyGJl9w.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 memoryAllocator.cpp
     /tmp/ccyGJl9w.s:9      .text:0000000000000000 _ZN15MemoryAllocator8mem_initEv
     /tmp/ccyGJl9w.s:13     .text:0000000000000000 .L0 
     /tmp/ccyGJl9w.s:14     .text:0000000000000000 .L0 
     /tmp/ccyGJl9w.s:15     .text:0000000000000004 .L0 
     /tmp/ccyGJl9w.s:17     .text:0000000000000008 .L0 
     /tmp/ccyGJl9w.s:19     .text:000000000000000c .L0 
     /tmp/ccyGJl9w.s:21     .text:000000000000000c .L0 
     /tmp/ccyGJl9w.s:22     .text:000000000000000c .L0 
     /tmp/ccyGJl9w.s:27     .text:0000000000000024 .L0 
     /tmp/ccyGJl9w.s:28     .text:0000000000000024 .L0 
     /tmp/ccyGJl9w.s:32     .text:0000000000000034 .L0 
     /tmp/ccyGJl9w.s:34     .text:0000000000000038 .L0 
     /tmp/ccyGJl9w.s:36     .text:000000000000003c .L0 
     /tmp/ccyGJl9w.s:38     .text:0000000000000040 .L0 
     /tmp/ccyGJl9w.s:40     .text:0000000000000044 .L0 
     /tmp/ccyGJl9w.s:41     .text:0000000000000044 .L0 
     /tmp/ccyGJl9w.s:43     .text:0000000000000048 .L0 
     /tmp/ccyGJl9w.s:45     .text:000000000000004c .L0 
     /tmp/ccyGJl9w.s:46     .text:000000000000004c .L0 
     /tmp/ccyGJl9w.s:48     .text:0000000000000050 .L0 
     /tmp/ccyGJl9w.s:49     .text:0000000000000050 .L0 
     /tmp/ccyGJl9w.s:51     .text:0000000000000054 .L0 
     /tmp/ccyGJl9w.s:52     .text:0000000000000058 .L0 
     /tmp/ccyGJl9w.s:53     .text:0000000000000058 .L0 
     /tmp/ccyGJl9w.s:55     .text:000000000000005c .L0 
     /tmp/ccyGJl9w.s:57     .text:0000000000000060 .L0 
     /tmp/ccyGJl9w.s:63     .text:0000000000000060 _ZN15MemoryAllocator9mem_allocEm
     /tmp/ccyGJl9w.s:66     .text:0000000000000060 .L0 
     /tmp/ccyGJl9w.s:68     .text:0000000000000060 .L0 
     /tmp/ccyGJl9w.s:69     .text:0000000000000060 .L0 
     /tmp/ccyGJl9w.s:71     .text:0000000000000064 .L0 
     /tmp/ccyGJl9w.s:72     .text:0000000000000068 .L0 
     /tmp/ccyGJl9w.s:76     .text:0000000000000074 .L0 
     /tmp/ccyGJl9w.s:77     .text:0000000000000074 .L0 
     /tmp/ccyGJl9w.s:78     .text:0000000000000074 .L0 
     /tmp/ccyGJl9w.s:80     .text:0000000000000078 .L0 
     /tmp/ccyGJl9w.s:82     .text:0000000000000078 .L0 
     /tmp/ccyGJl9w.s:83     .text:0000000000000078 .L0 
     /tmp/ccyGJl9w.s:86     .text:000000000000007c .L0 
     /tmp/ccyGJl9w.s:87     .text:000000000000007c .L0 
     /tmp/ccyGJl9w.s:89     .text:0000000000000084 .L0 
     /tmp/ccyGJl9w.s:92     .text:0000000000000088 .L0 
     /tmp/ccyGJl9w.s:93     .text:0000000000000088 .L0 
     /tmp/ccyGJl9w.s:97     .text:0000000000000090 .L0 
     /tmp/ccyGJl9w.s:98     .text:0000000000000090 .L0 
     /tmp/ccyGJl9w.s:100    .text:0000000000000094 .L0 
     /tmp/ccyGJl9w.s:102    .text:0000000000000098 .L0 
     /tmp/ccyGJl9w.s:104    .text:000000000000009c .L0 
     /tmp/ccyGJl9w.s:105    .text:000000000000009c .L0 
     /tmp/ccyGJl9w.s:108    .text:00000000000000a0 .L0 
     /tmp/ccyGJl9w.s:112    .text:00000000000000a4 .L0 
     /tmp/ccyGJl9w.s:113    .text:00000000000000a4 .L0 
     /tmp/ccyGJl9w.s:116    .text:00000000000000ac .L0 
     /tmp/ccyGJl9w.s:117    .text:00000000000000ac .L0 
     /tmp/ccyGJl9w.s:123    .text:00000000000000bc .L0 
GAS LISTING /tmp/ccyGJl9w.s 			page 18


     /tmp/ccyGJl9w.s:125    .text:00000000000000c0 .L0 
     /tmp/ccyGJl9w.s:126    .text:00000000000000c0 .L0 
     /tmp/ccyGJl9w.s:128    .text:00000000000000c4 .L0 
     /tmp/ccyGJl9w.s:131    .text:00000000000000c8 .L0 
     /tmp/ccyGJl9w.s:132    .text:00000000000000c8 .L0 
     /tmp/ccyGJl9w.s:135    .text:00000000000000cc .L0 
     /tmp/ccyGJl9w.s:138    .text:00000000000000d4 .L0 
     /tmp/ccyGJl9w.s:139    .text:00000000000000d4 .L0 
     /tmp/ccyGJl9w.s:142    .text:00000000000000dc .L0 
     /tmp/ccyGJl9w.s:145    .text:00000000000000e0 .L0 
     /tmp/ccyGJl9w.s:146    .text:00000000000000e0 .L0 
     /tmp/ccyGJl9w.s:148    .text:00000000000000e4 .L0 
     /tmp/ccyGJl9w.s:150    .text:00000000000000e8 .L0 
     /tmp/ccyGJl9w.s:151    .text:00000000000000e8 .L0 
     /tmp/ccyGJl9w.s:153    .text:00000000000000ec .L0 
     /tmp/ccyGJl9w.s:156    .text:00000000000000f0 .L0 
     /tmp/ccyGJl9w.s:157    .text:00000000000000f0 .L0 
     /tmp/ccyGJl9w.s:159    .text:00000000000000f4 .L0 
     /tmp/ccyGJl9w.s:161    .text:00000000000000f8 .L0 
     /tmp/ccyGJl9w.s:162    .text:00000000000000f8 .L0 
     /tmp/ccyGJl9w.s:164    .text:00000000000000fc .L0 
     /tmp/ccyGJl9w.s:168    .text:0000000000000104 .L0 
     /tmp/ccyGJl9w.s:169    .text:0000000000000104 .L0 
     /tmp/ccyGJl9w.s:171    .text:0000000000000108 .L0 
     /tmp/ccyGJl9w.s:177    .text:0000000000000114 .L0 
     /tmp/ccyGJl9w.s:178    .text:0000000000000114 .L0 
     /tmp/ccyGJl9w.s:181    .text:0000000000000118 .L0 
     /tmp/ccyGJl9w.s:182    .text:0000000000000118 .L0 
     /tmp/ccyGJl9w.s:185    .text:000000000000011c .L0 
     /tmp/ccyGJl9w.s:186    .text:000000000000011c .L0 
     /tmp/ccyGJl9w.s:188    .text:0000000000000120 .L0 
     /tmp/ccyGJl9w.s:190    .text:0000000000000124 .L0 
     /tmp/ccyGJl9w.s:191    .text:0000000000000124 .L0 
     /tmp/ccyGJl9w.s:193    .text:0000000000000128 .L0 
     /tmp/ccyGJl9w.s:194    .text:0000000000000128 .L0 
     /tmp/ccyGJl9w.s:196    .text:000000000000012c .L0 
     /tmp/ccyGJl9w.s:199    .text:0000000000000130 .L0 
     /tmp/ccyGJl9w.s:200    .text:0000000000000130 .L0 
     /tmp/ccyGJl9w.s:202    .text:0000000000000134 .L0 
     /tmp/ccyGJl9w.s:204    .text:0000000000000138 .L0 
     /tmp/ccyGJl9w.s:205    .text:0000000000000138 .L0 
     /tmp/ccyGJl9w.s:208    .text:000000000000013c .L0 
     /tmp/ccyGJl9w.s:209    .text:000000000000013c .L0 
     /tmp/ccyGJl9w.s:211    .text:0000000000000140 .L0 
     /tmp/ccyGJl9w.s:213    .text:0000000000000144 .L0 
     /tmp/ccyGJl9w.s:214    .text:0000000000000144 .L0 
     /tmp/ccyGJl9w.s:217    .text:0000000000000148 .L0 
     /tmp/ccyGJl9w.s:223    .text:000000000000014c .L0 
     /tmp/ccyGJl9w.s:224    .text:000000000000014c .L0 
     /tmp/ccyGJl9w.s:226    .text:0000000000000150 .L0 
     /tmp/ccyGJl9w.s:227    .text:0000000000000150 .L0 
     /tmp/ccyGJl9w.s:230    .text:0000000000000154 .L0 
     /tmp/ccyGJl9w.s:231    .text:0000000000000154 .L0 
     /tmp/ccyGJl9w.s:233    .text:0000000000000158 .L0 
     /tmp/ccyGJl9w.s:234    .text:0000000000000158 .L0 
     /tmp/ccyGJl9w.s:236    .text:0000000000000160 .L0 
     /tmp/ccyGJl9w.s:238    .text:0000000000000164 .L0 
GAS LISTING /tmp/ccyGJl9w.s 			page 19


     /tmp/ccyGJl9w.s:239    .text:0000000000000164 .L0 
     /tmp/ccyGJl9w.s:241    .text:0000000000000168 .L0 
     /tmp/ccyGJl9w.s:242    .text:0000000000000168 .L0 
     /tmp/ccyGJl9w.s:245    .text:0000000000000170 .L0 
     /tmp/ccyGJl9w.s:246    .text:0000000000000170 .L0 
     /tmp/ccyGJl9w.s:250    .text:0000000000000174 .L0 
     /tmp/ccyGJl9w.s:251    .text:0000000000000178 .L0 
     /tmp/ccyGJl9w.s:252    .text:0000000000000178 .L0 
     /tmp/ccyGJl9w.s:254    .text:000000000000017c .L0 
     /tmp/ccyGJl9w.s:255    .text:000000000000017c .L0 
     /tmp/ccyGJl9w.s:257    .text:0000000000000180 .L0 
     /tmp/ccyGJl9w.s:260    .text:0000000000000184 .L0 
     /tmp/ccyGJl9w.s:264    .text:0000000000000188 .L0 
     /tmp/ccyGJl9w.s:268    .text:0000000000000188 .L0 
     /tmp/ccyGJl9w.s:269    .text:0000000000000188 .L0 
     /tmp/ccyGJl9w.s:271    .text:0000000000000190 .L0 
     /tmp/ccyGJl9w.s:272    .text:0000000000000190 .L0 
     /tmp/ccyGJl9w.s:279    .text:0000000000000198 .L0 
     /tmp/ccyGJl9w.s:280    .text:0000000000000198 .L0 
     /tmp/ccyGJl9w.s:282    .text:00000000000001a0 .L0 
     /tmp/ccyGJl9w.s:283    .text:00000000000001a0 .L0 
     /tmp/ccyGJl9w.s:287    .text:00000000000001a8 .L0 
     /tmp/ccyGJl9w.s:288    .text:00000000000001a8 .L0 
     /tmp/ccyGJl9w.s:289    .text:00000000000001a8 .L0 
     /tmp/ccyGJl9w.s:290    .text:00000000000001a8 .L0 
     /tmp/ccyGJl9w.s:292    .text:00000000000001a8 .L0 
     /tmp/ccyGJl9w.s:295    .text:00000000000001ac .L0 
     /tmp/ccyGJl9w.s:296    .text:00000000000001b0 .L0 
     /tmp/ccyGJl9w.s:302    .text:00000000000001b0 _ZN15MemoryAllocator9tryToJoinEPNS_11FreeSegmentE
     /tmp/ccyGJl9w.s:305    .text:00000000000001b0 .L0 
     /tmp/ccyGJl9w.s:307    .text:00000000000001b0 .L0 
     /tmp/ccyGJl9w.s:308    .text:00000000000001b4 .L0 
     /tmp/ccyGJl9w.s:310    .text:00000000000001b8 .L0 
     /tmp/ccyGJl9w.s:312    .text:00000000000001bc .L0 
     /tmp/ccyGJl9w.s:314    .text:00000000000001bc .L0 
     /tmp/ccyGJl9w.s:316    .text:00000000000001c0 .L0 
     /tmp/ccyGJl9w.s:317    .text:00000000000001c0 .L0 
     /tmp/ccyGJl9w.s:319    .text:00000000000001c4 .L0 
     /tmp/ccyGJl9w.s:321    .text:00000000000001c8 .L0 
     /tmp/ccyGJl9w.s:323    .text:00000000000001cc .L0 
     /tmp/ccyGJl9w.s:325    .text:00000000000001d0 .L0 
     /tmp/ccyGJl9w.s:327    .text:00000000000001d4 .L0 
     /tmp/ccyGJl9w.s:330    .text:00000000000001d8 .L0 
     /tmp/ccyGJl9w.s:331    .text:00000000000001dc .L0 
     /tmp/ccyGJl9w.s:332    .text:00000000000001dc .L0 
     /tmp/ccyGJl9w.s:333    .text:00000000000001dc .L0 
     /tmp/ccyGJl9w.s:335    .text:00000000000001e0 .L0 
     /tmp/ccyGJl9w.s:338    .text:00000000000001e4 .L0 
     /tmp/ccyGJl9w.s:340    .text:00000000000001e4 .L0 
     /tmp/ccyGJl9w.s:341    .text:00000000000001e4 .L0 
     /tmp/ccyGJl9w.s:343    .text:00000000000001e8 .L0 
     /tmp/ccyGJl9w.s:347    .text:00000000000001f4 .L0 
     /tmp/ccyGJl9w.s:348    .text:00000000000001f4 .L0 
     /tmp/ccyGJl9w.s:350    .text:00000000000001f8 .L0 
     /tmp/ccyGJl9w.s:352    .text:00000000000001fc .L0 
     /tmp/ccyGJl9w.s:354    .text:0000000000000200 .L0 
     /tmp/ccyGJl9w.s:355    .text:0000000000000200 .L0 
GAS LISTING /tmp/ccyGJl9w.s 			page 20


     /tmp/ccyGJl9w.s:357    .text:0000000000000208 .L0 
     /tmp/ccyGJl9w.s:363    .text:0000000000000208 _ZN15MemoryAllocator8mem_freeEPv
     /tmp/ccyGJl9w.s:366    .text:0000000000000208 .L0 
     /tmp/ccyGJl9w.s:368    .text:0000000000000208 .L0 
     /tmp/ccyGJl9w.s:369    .text:0000000000000208 .L0 
     /tmp/ccyGJl9w.s:372    .text:0000000000000210 .L0 
     /tmp/ccyGJl9w.s:373    .text:0000000000000210 .L0 
     /tmp/ccyGJl9w.s:376    .text:0000000000000218 .L0 
     /tmp/ccyGJl9w.s:380    .text:000000000000021c .L0 
     /tmp/ccyGJl9w.s:381    .text:000000000000021c .L0 
     /tmp/ccyGJl9w.s:382    .text:000000000000021c .L0 
     /tmp/ccyGJl9w.s:384    .text:0000000000000220 .L0 
     /tmp/ccyGJl9w.s:390    .text:0000000000000234 .L0 
     /tmp/ccyGJl9w.s:393    .text:0000000000000238 .L0 
     /tmp/ccyGJl9w.s:394    .text:0000000000000238 .L0 
     /tmp/ccyGJl9w.s:396    .text:000000000000023c .L0 
     /tmp/ccyGJl9w.s:399    .text:0000000000000240 .L0 
     /tmp/ccyGJl9w.s:402    .text:0000000000000244 .L0 
     /tmp/ccyGJl9w.s:404    .text:0000000000000248 .L0 
     /tmp/ccyGJl9w.s:405    .text:000000000000024c .L0 
     /tmp/ccyGJl9w.s:409    .text:0000000000000258 .L0 
     /tmp/ccyGJl9w.s:410    .text:0000000000000258 .L0 
     /tmp/ccyGJl9w.s:411    .text:0000000000000258 .L0 
     /tmp/ccyGJl9w.s:413    .text:000000000000025c .L0 
     /tmp/ccyGJl9w.s:415    .text:000000000000025c .L0 
     /tmp/ccyGJl9w.s:417    .text:0000000000000260 .L0 
     /tmp/ccyGJl9w.s:418    .text:0000000000000260 .L0 
     /tmp/ccyGJl9w.s:420    .text:0000000000000264 .L0 
     /tmp/ccyGJl9w.s:424    .text:0000000000000268 .L0 
     /tmp/ccyGJl9w.s:425    .text:0000000000000268 .L0 
     /tmp/ccyGJl9w.s:426    .text:0000000000000268 .L0 
     /tmp/ccyGJl9w.s:428    .text:0000000000000270 .L0 
     /tmp/ccyGJl9w.s:430    .text:0000000000000274 .L0 
     /tmp/ccyGJl9w.s:434    .text:0000000000000278 .L0 
     /tmp/ccyGJl9w.s:436    .text:000000000000027c .L0 
     /tmp/ccyGJl9w.s:439    .text:0000000000000280 .L0 
     /tmp/ccyGJl9w.s:441    .text:0000000000000284 .L0 
     /tmp/ccyGJl9w.s:446    .text:000000000000028c .L0 
     /tmp/ccyGJl9w.s:447    .text:000000000000028c .L0 
     /tmp/ccyGJl9w.s:449    .text:0000000000000290 .L0 
     /tmp/ccyGJl9w.s:454    .text:000000000000029c .L0 
     /tmp/ccyGJl9w.s:461    .text:00000000000002a8 .L0 
     /tmp/ccyGJl9w.s:462    .text:00000000000002a8 .L0 
     /tmp/ccyGJl9w.s:465    .text:00000000000002ac .L0 
     /tmp/ccyGJl9w.s:466    .text:00000000000002ac .L0 
     /tmp/ccyGJl9w.s:468    .text:00000000000002b0 .L0 
     /tmp/ccyGJl9w.s:470    .text:00000000000002b4 .L0 
     /tmp/ccyGJl9w.s:471    .text:00000000000002b4 .L0 
     /tmp/ccyGJl9w.s:473    .text:00000000000002b8 .L0 
     /tmp/ccyGJl9w.s:475    .text:00000000000002bc .L0 
     /tmp/ccyGJl9w.s:476    .text:00000000000002bc .L0 
     /tmp/ccyGJl9w.s:478    .text:00000000000002c0 .L0 
     /tmp/ccyGJl9w.s:481    .text:00000000000002c4 .L0 
     /tmp/ccyGJl9w.s:482    .text:00000000000002c4 .L0 
     /tmp/ccyGJl9w.s:484    .text:00000000000002c8 .L0 
     /tmp/ccyGJl9w.s:486    .text:00000000000002cc .L0 
     /tmp/ccyGJl9w.s:487    .text:00000000000002cc .L0 
GAS LISTING /tmp/ccyGJl9w.s 			page 21


     /tmp/ccyGJl9w.s:490    .text:00000000000002d0 .L0 
     /tmp/ccyGJl9w.s:492    .text:00000000000002d4 .L0 
     /tmp/ccyGJl9w.s:493    .text:00000000000002d4 .L0 
     /tmp/ccyGJl9w.s:496    .text:00000000000002d8 .L0 
     /tmp/ccyGJl9w.s:497    .text:00000000000002d8 .L0 
     /tmp/ccyGJl9w.s:500    .text:00000000000002e0 .L0 
     /tmp/ccyGJl9w.s:501    .text:00000000000002e0 .L0 
     /tmp/ccyGJl9w.s:505    .text:00000000000002ec .L0 
     /tmp/ccyGJl9w.s:506    .text:00000000000002ec .L0 
     /tmp/ccyGJl9w.s:508    .text:00000000000002f0 .L0 
     /tmp/ccyGJl9w.s:509    .text:00000000000002f4 .L0 
     /tmp/ccyGJl9w.s:510    .text:00000000000002f4 .L0 
     /tmp/ccyGJl9w.s:512    .text:00000000000002f8 .L0 
     /tmp/ccyGJl9w.s:513    .text:00000000000002f8 .L0 
     /tmp/ccyGJl9w.s:515    .text:00000000000002fc .L0 
     /tmp/ccyGJl9w.s:518    .text:0000000000000300 .L0 
     /tmp/ccyGJl9w.s:522    .text:0000000000000304 .L0 
     /tmp/ccyGJl9w.s:524    .text:0000000000000304 .L0 
     /tmp/ccyGJl9w.s:525    .text:0000000000000304 .L0 
     /tmp/ccyGJl9w.s:530    .text:0000000000000314 .L0 
     /tmp/ccyGJl9w.s:531    .text:0000000000000314 .L0 
     /tmp/ccyGJl9w.s:535    .text:0000000000000320 .L0 
     /tmp/ccyGJl9w.s:536    .text:0000000000000320 .L0 
     /tmp/ccyGJl9w.s:537    .text:0000000000000320 .L0 
     /tmp/ccyGJl9w.s:538    .text:0000000000000320 .L0 
     /tmp/ccyGJl9w.s:540    .text:0000000000000320 .L0 
     /tmp/ccyGJl9w.s:546    .text:0000000000000328 .L0 
     /tmp/ccyGJl9w.s:549    .text:000000000000032c .L0 
     /tmp/ccyGJl9w.s:550    .text:0000000000000330 .L0 
     /tmp/ccyGJl9w.s:569    .bss:0000000000000010 _ZN15MemoryAllocator11initializedE
     /tmp/ccyGJl9w.s:565    .bss:0000000000000008 _ZN15MemoryAllocator15usedSegmentHeadE
     /tmp/ccyGJl9w.s:561    .bss:0000000000000000 _ZN15MemoryAllocator15freeSegmentHeadE
     /tmp/ccyGJl9w.s:558    .bss:0000000000000000 .LANCHOR0
     /tmp/ccyGJl9w.s:575    .text:0000000000000330 .L0 
     /tmp/ccyGJl9w.s:22     .text:000000000000000c .L0 
     /tmp/ccyGJl9w.s:24     .text:0000000000000018 .L0 
     /tmp/ccyGJl9w.s:28     .text:0000000000000024 .L0 
     /tmp/ccyGJl9w.s:87     .text:000000000000007c .L0 
     /tmp/ccyGJl9w.s:93     .text:0000000000000088 .L0 
     /tmp/ccyGJl9w.s:118    .text:00000000000000b0 .L0 
     /tmp/ccyGJl9w.s:139    .text:00000000000000d4 .L0 
     /tmp/ccyGJl9w.s:171    .text:0000000000000108 .L0 
     /tmp/ccyGJl9w.s:234    .text:0000000000000158 .L0 
     /tmp/ccyGJl9w.s:242    .text:0000000000000168 .L0 
     /tmp/ccyGJl9w.s:269    .text:0000000000000188 .L0 
     /tmp/ccyGJl9w.s:280    .text:0000000000000198 .L0 
     /tmp/ccyGJl9w.s:373    .text:0000000000000210 .L0 
     /tmp/ccyGJl9w.s:426    .text:0000000000000268 .L0 
     /tmp/ccyGJl9w.s:449    .text:0000000000000290 .L0 
     /tmp/ccyGJl9w.s:525    .text:0000000000000304 .L0 
     /tmp/ccyGJl9w.s:531    .text:0000000000000314 .L0 
     /tmp/ccyGJl9w.s:286    .text:00000000000001a8 .L17
     /tmp/ccyGJl9w.s:110    .text:00000000000000a4 .L22
     /tmp/ccyGJl9w.s:121    .text:00000000000000bc .L6
     /tmp/ccyGJl9w.s:95     .text:0000000000000090 .L7
     /tmp/ccyGJl9w.s:90     .text:0000000000000088 .L5
     /tmp/ccyGJl9w.s:248    .text:0000000000000174 .L3
GAS LISTING /tmp/ccyGJl9w.s 			page 22


     /tmp/ccyGJl9w.s:174    .text:0000000000000114 .L8
     /tmp/ccyGJl9w.s:166    .text:0000000000000104 .L23
     /tmp/ccyGJl9w.s:154    .text:00000000000000f0 .L10
     /tmp/ccyGJl9w.s:219    .text:000000000000014c .L11
     /tmp/ccyGJl9w.s:143    .text:00000000000000e0 .L9
     /tmp/ccyGJl9w.s:263    .text:0000000000000188 .L12
     /tmp/ccyGJl9w.s:206    .text:000000000000013c .L14
     /tmp/ccyGJl9w.s:275    .text:0000000000000198 .L24
     /tmp/ccyGJl9w.s:197    .text:0000000000000130 .L13
     /tmp/ccyGJl9w.s:243    .text:0000000000000170 .L16
     /tmp/ccyGJl9w.s:328    .text:00000000000001d8 .L25
     /tmp/ccyGJl9w.s:337    .text:00000000000001e4 .L28
     /tmp/ccyGJl9w.s:534    .text:0000000000000320 .L42
     /tmp/ccyGJl9w.s:400    .text:0000000000000244 .L31
     /tmp/ccyGJl9w.s:378    .text:000000000000021c .L32
     /tmp/ccyGJl9w.s:544    .text:0000000000000328 .L43
     /tmp/ccyGJl9w.s:444    .text:000000000000028c .L33
     /tmp/ccyGJl9w.s:452    .text:000000000000029c .L44
     /tmp/ccyGJl9w.s:456    .text:00000000000002a4 .L45
     /tmp/ccyGJl9w.s:459    .text:00000000000002a8 .L35
     /tmp/ccyGJl9w.s:432    .text:0000000000000278 .L36
     /tmp/ccyGJl9w.s:421    .text:0000000000000268 .L34
     /tmp/ccyGJl9w.s:521    .text:0000000000000304 .L37
     /tmp/ccyGJl9w.s:488    .text:00000000000002d0 .L39
     /tmp/ccyGJl9w.s:528    .text:0000000000000314 .L40
     /tmp/ccyGJl9w.s:479    .text:00000000000002c4 .L38
     /tmp/ccyGJl9w.s:494    .text:00000000000002d8 .L41
     /tmp/ccyGJl9w.s:1021   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccyGJl9w.s:1864   .debug_str:00000000000001ac .LASF41
     /tmp/ccyGJl9w.s:1862   .debug_str:0000000000000194 .LASF42
     /tmp/ccyGJl9w.s:1876   .debug_str:00000000000002c8 .LASF43
     /tmp/ccyGJl9w.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccyGJl9w.s:572    .text:0000000000000330 .Letext0
     /tmp/ccyGJl9w.s:1808   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccyGJl9w.s:1868   .debug_str:0000000000000289 .LASF0
     /tmp/ccyGJl9w.s:1856   .debug_str:000000000000016f .LASF1
     /tmp/ccyGJl9w.s:1848   .debug_str:0000000000000137 .LASF2
     /tmp/ccyGJl9w.s:1828   .debug_str:0000000000000094 .LASF4
     /tmp/ccyGJl9w.s:1852   .debug_str:0000000000000151 .LASF3
     /tmp/ccyGJl9w.s:1814   .debug_str:0000000000000023 .LASF5
     /tmp/ccyGJl9w.s:1810   .debug_str:0000000000000000 .LASF6
     /tmp/ccyGJl9w.s:1840   .debug_str:00000000000000e4 .LASF7
     /tmp/ccyGJl9w.s:1820   .debug_str:0000000000000061 .LASF8
     /tmp/ccyGJl9w.s:1824   .debug_str:0000000000000076 .LASF9
     /tmp/ccyGJl9w.s:1908   .debug_str:00000000000003d4 .LASF10
     /tmp/ccyGJl9w.s:1842   .debug_str:00000000000000f7 .LASF11
     /tmp/ccyGJl9w.s:1900   .debug_str:00000000000003b0 .LASF12
     /tmp/ccyGJl9w.s:1882   .debug_str:000000000000031f .LASF13
     /tmp/ccyGJl9w.s:1860   .debug_str:0000000000000188 .LASF14
     /tmp/ccyGJl9w.s:1836   .debug_str:00000000000000c9 .LASF15
     /tmp/ccyGJl9w.s:1880   .debug_str:0000000000000309 .LASF16
     /tmp/ccyGJl9w.s:1812   .debug_str:0000000000000013 .LASF25
     /tmp/ccyGJl9w.s:1854   .debug_str:0000000000000163 .LASF20
     /tmp/ccyGJl9w.s:1904   .debug_str:00000000000003ca .LASF17
     /tmp/ccyGJl9w.s:1816   .debug_str:000000000000002a .LASF18
     /tmp/ccyGJl9w.s:1906   .debug_str:00000000000003cf .LASF19
     /tmp/ccyGJl9w.s:1896   .debug_str:000000000000039a .LASF21
GAS LISTING /tmp/ccyGJl9w.s 			page 23


     /tmp/ccyGJl9w.s:1826   .debug_str:0000000000000084 .LASF22
     /tmp/ccyGJl9w.s:1844   .debug_str:0000000000000106 .LASF23
     /tmp/ccyGJl9w.s:1834   .debug_str:00000000000000c0 .LASF44
     /tmp/ccyGJl9w.s:1830   .debug_str:000000000000009b .LASF45
     /tmp/ccyGJl9w.s:1898   .debug_str:00000000000003a6 .LASF46
     /tmp/ccyGJl9w.s:1818   .debug_str:000000000000002f .LASF47
     /tmp/ccyGJl9w.s:1850   .debug_str:0000000000000145 .LASF24
     /tmp/ccyGJl9w.s:1866   .debug_str:0000000000000270 .LASF27
     /tmp/ccyGJl9w.s:1902   .debug_str:00000000000003c0 .LASF48
     /tmp/ccyGJl9w.s:1894   .debug_str:0000000000000379 .LASF49
     /tmp/ccyGJl9w.s:1884   .debug_str:000000000000032f .LASF26
     /tmp/ccyGJl9w.s:1846   .debug_str:0000000000000116 .LASF28
     /tmp/ccyGJl9w.s:1888   .debug_str:0000000000000346 .LASF29
     /tmp/ccyGJl9w.s:1892   .debug_str:0000000000000352 .LASF30
     /tmp/ccyGJl9w.s:1878   .debug_str:00000000000002e2 .LASF31
     /tmp/ccyGJl9w.s:1874   .debug_str:00000000000002a5 .LASF32
     /tmp/ccyGJl9w.s:303    .text:00000000000001b0 .LFB6
     /tmp/ccyGJl9w.s:358    .text:0000000000000208 .LFE6
     /tmp/ccyGJl9w.s:1832   .debug_str:00000000000000bb .LASF33
     /tmp/ccyGJl9w.s:364    .text:0000000000000208 .LFB5
     /tmp/ccyGJl9w.s:551    .text:0000000000000330 .LFE5
     /tmp/ccyGJl9w.s:1838   .debug_str:00000000000000df .LASF34
     /tmp/ccyGJl9w.s:1532   .debug_loc:0000000000000000 .LLST6
     /tmp/ccyGJl9w.s:1573   .debug_loc:00000000000000ae .LLST7
     /tmp/ccyGJl9w.s:1597   .debug_loc:000000000000011e .LLST8
     /tmp/ccyGJl9w.s:1858   .debug_str:0000000000000182 .LASF35
     /tmp/ccyGJl9w.s:1625   .debug_loc:00000000000001a1 .LLST9
     /tmp/ccyGJl9w.s:1872   .debug_str:000000000000029e .LASF36
     /tmp/ccyGJl9w.s:1654   .debug_loc:0000000000000225 .LLST10
     /tmp/ccyGJl9w.s:498    .text:00000000000002e0 .LVL34
     /tmp/ccyGJl9w.s:503    .text:00000000000002ec .LVL35
     /tmp/ccyGJl9w.s:10     .text:0000000000000000 .LFB4
     /tmp/ccyGJl9w.s:58     .text:0000000000000060 .LFE4
     /tmp/ccyGJl9w.s:64     .text:0000000000000060 .LFB3
     /tmp/ccyGJl9w.s:297    .text:00000000000001b0 .LFE3
     /tmp/ccyGJl9w.s:1675   .debug_loc:0000000000000274 .LLST0
     /tmp/ccyGJl9w.s:1710   .debug_loc:00000000000002fe .LLST1
     /tmp/ccyGJl9w.s:1886   .debug_str:0000000000000338 .LASF37
     /tmp/ccyGJl9w.s:1725   .debug_loc:0000000000000347 .LLST2
     /tmp/ccyGJl9w.s:1822   .debug_str:0000000000000071 .LASF38
     /tmp/ccyGJl9w.s:1746   .debug_loc:00000000000003a6 .LLST3
     /tmp/ccyGJl9w.s:1800   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccyGJl9w.s:1890   .debug_str:000000000000034b .LASF39
     /tmp/ccyGJl9w.s:1757   .debug_loc:00000000000003dc .LLST4
     /tmp/ccyGJl9w.s:1870   .debug_str:0000000000000296 .LASF40
     /tmp/ccyGJl9w.s:1776   .debug_loc:000000000000042b .LLST5
     /tmp/ccyGJl9w.s:114    .text:00000000000000ac .LVL5
     /tmp/ccyGJl9w.s:367    .text:0000000000000208 .LVL22
     /tmp/ccyGJl9w.s:463    .text:00000000000002ac .LVL33
     /tmp/ccyGJl9w.s:520    .text:0000000000000304 .LVL37
     /tmp/ccyGJl9w.s:533    .text:0000000000000320 .LVL38
     /tmp/ccyGJl9w.s:541    .text:0000000000000324 .LVL39
     /tmp/ccyGJl9w.s:543    .text:0000000000000328 .LVL40
     /tmp/ccyGJl9w.s:547    .text:000000000000032c .LVL41
     /tmp/ccyGJl9w.s:374    .text:0000000000000218 .LVL23
     /tmp/ccyGJl9w.s:392    .text:0000000000000238 .LVL25
     /tmp/ccyGJl9w.s:397    .text:0000000000000240 .LVL26
GAS LISTING /tmp/ccyGJl9w.s 			page 24


     /tmp/ccyGJl9w.s:377    .text:000000000000021c .LVL24
     /tmp/ccyGJl9w.s:423    .text:0000000000000268 .LVL27
     /tmp/ccyGJl9w.s:431    .text:0000000000000278 .LVL28
     /tmp/ccyGJl9w.s:437    .text:0000000000000280 .LVL29
     /tmp/ccyGJl9w.s:443    .text:000000000000028c .LVL30
     /tmp/ccyGJl9w.s:451    .text:000000000000029c .LVL31
     /tmp/ccyGJl9w.s:458    .text:00000000000002a8 .LVL32
     /tmp/ccyGJl9w.s:516    .text:00000000000002fc .LVL36
     /tmp/ccyGJl9w.s:67     .text:0000000000000060 .LVL0
     /tmp/ccyGJl9w.s:84     .text:000000000000007c .LVL1
     /tmp/ccyGJl9w.s:258    .text:0000000000000180 .LVL16
     /tmp/ccyGJl9w.s:262    .text:0000000000000188 .LVL17
     /tmp/ccyGJl9w.s:285    .text:00000000000001a8 .LVL19
     /tmp/ccyGJl9w.s:293    .text:00000000000001ac .LVL20
     /tmp/ccyGJl9w.s:94     .text:0000000000000090 .LVL2
     /tmp/ccyGJl9w.s:109    .text:00000000000000a4 .LVL4
     /tmp/ccyGJl9w.s:120    .text:00000000000000bc .LVL6
     /tmp/ccyGJl9w.s:247    .text:0000000000000174 .LVL15
     /tmp/ccyGJl9w.s:129    .text:00000000000000c8 .LVL7
     /tmp/ccyGJl9w.s:140    .text:00000000000000dc .LVL8
     /tmp/ccyGJl9w.s:173    .text:0000000000000114 .LVL9
     /tmp/ccyGJl9w.s:215    .text:0000000000000148 .LVL12
     /tmp/ccyGJl9w.s:218    .text:000000000000014c .LVL13
     /tmp/ccyGJl9w.s:274    .text:0000000000000198 .LVL18
     /tmp/ccyGJl9w.s:228    .text:0000000000000154 .LVL14
     /tmp/ccyGJl9w.s:179    .text:0000000000000118 .LVL10
     /tmp/ccyGJl9w.s:183    .text:000000000000011c .LVL11
     /tmp/ccyGJl9w.s:576    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccyGJl9w.s:175    .text:0000000000000114 .LBB3
     /tmp/ccyGJl9w.s:220    .text:000000000000014c .LBE3
     /tmp/ccyGJl9w.s:266    .text:0000000000000188 .LBB4
     /tmp/ccyGJl9w.s:276    .text:0000000000000198 .LBE4

UNDEFINED SYMBOLS
HEAP_START_ADDR
HEAP_END_ADDR
